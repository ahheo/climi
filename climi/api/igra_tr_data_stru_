#!/usr/bin/env python3

from climi.uuuu.ffff import prg_
from scipy.stats import linregress as _lr
import xarray as xr
import pandas as pd
import numpy as np
import igra
import argparse
import os


_djn = os.path.join


def main():
    parser = argparse.ArgumentParser("Restructure igra trend data")       
    parser.add_argument("--ys", type=int, help="year start")                                          
    parser.add_argument("--ye", type=int, help="year end")                                          
    parser.add_argument("-f", "--freq", type=str, default='annual',                 
                        help="input data frequency")                    
    args = parser.parse_args()
    y0, y1 = args.ys, args.ye
    freq = args.freq
    _fD = dict(monthly='month', seasonal='season', annual='year')
    dir0 = '/home/clin/Documents/data/igra/v2/metadata'
    dir1 = '/home/clin/Documents/res_0/'
    dir1_ = _djn(dir1, freq)
    dir2 = '/home/clin/Documents/res_1/'
    dir2_ = _djn(dir2, freq)
    vs_ = ('gph', 'temp', 'rhumi', 'dpd',
           'winds', 'uwind', 'vwind', 'uwinda', 'vwinda')
    cc, pp = {}, {}
    os.makedirs(dir2_, exist_ok=True)
    stations = igra.read.stationlist(_djn(dir0, 'igra2-station-list.txt'))
    A = pd.read_csv(_djn(dir0, 'monthly.csv'), index_col=0, squeeze=1)
    nS = A.count()
    for i, sid in enumerate(stations[A].index):
        #if i < 810:
        #    continue
        fn_c = _djn(dir1_, '{}_{}-{}_c.nc'.format(sid, y0, y1))
        fn_p = _djn(dir1_, '{}_{}-{}_p.nc'.format(sid, y0, y1))
        if os.path.isfile(fn_c):
            print(prg_(i, nS), sid + ': fe')
            a = xr.load_dataset(fn_c)
            b = xr.load_dataset(fn_p)
            for v_ in vs_:
                cc.setdefault(v_, np.full((nS,) + a[v_].shape, np.nan))
                cc[v_][i,:] = a[v_].values
                pp.setdefault(v_, np.full((nS,) + b[v_].shape, np.nan))
                pp[v_][i,:] = a[v_].values
    print(cc.keys())
    for v_ in vs_:
        fn = _djn(dir2_, '{}-{}'.format(sid, y0, y1))
        np.savez(fn, c=cc[v_], p=pp[v_])


if __name__ == '__main__':
    main()
