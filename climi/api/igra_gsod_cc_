#!/usr/bin/env python3

from climi.uuuu.ffff import prg_, schF_keys_
from scipy.stats import pearsonr as _pr
import xarray as xr
import pandas as pd
import numpy as np
import igra
import argparse
import os


_djn = os.path.join


def _f(x, y, yeara, yearb, nn=16):
    A = pd.isna(x)
    B = pd.isna(y)
    yearc = set(yeara[~A]).intersection(yearb[~B])
    AA = [i in yearc for i in yeara]
    BB = [i in yearc for i in yearb]
    if len(yearc) < nn:
        return (np.nan, np.nan)
    else:
        return _pr(x[AA], y[BB])


def _sds(ds, y0=None, y1=None):
    year = ds.date.dt.year
    if y0 and y1:
        _yy = np.logical_and(year >= y0, year <= y1)
    elif y0:
        _yy = year >= y0
    elif y1:
        _yy = year <= y1
    else:
        return ds
    if np.sum(_yy):
        return ds.sel(date=_yy)


def main():
    parser = argparse.ArgumentParser("Calculate linear trend with igra data")       
    parser.add_argument("--ys", type=int, help="year start")                                          
    parser.add_argument("--ye", type=int, help="year end")                                          
    args = parser.parse_args()
    y0, y1 = args.ys, args.ye
    nn = .5 * (y1 - y0 + 1)
    dir0 = '/home/clin/Documents/data/igra/v2/metadata'
    dir1 = '/home/clin/Documents/data/igra/v2/data/annual'
    dir1_ = '/home/clin/Documents/data/gsod/annual'
    dir2_ = '/home/clin/Documents/res_4/'
    os.makedirs(dir2_, exist_ok=True)
    stations = pd.read_csv(_djn(dir0, 'monthly.csv'))
    nS = stations.id.count()
    oo = np.full((nS,), np.nan)
    for i, sid in enumerate(stations.id):
        #if i < 810:
        #    continue
        fn = _djn(dir1, sid + '.nc')
        fn_sch = schF_keys_(dir1_, s_=sid[-5:]+'0')
        if os.path.isfile(fn) and len(fn_sch) == 1:
            a = xr.load_dataset(fn)
            b = xr.load_dataset(fn_sch[0])
            a, b = _sds(a, y0=y0, y1=y1), _sds(b, y0=y0, y1=y1)
            yeara, yearb = a.date.dt.year, b.date.dt.year
            if a and b:
                print(prg_(i, nS), sid + ':: DA')
                x = a.assign(uwinda=abs(a.uwind),vwinda=abs(a.vwind))
                x = x[['winds', 'uwinda', 'vwinda']]
                y = b['wdsp']
                z = b['stp']
                oo[i] = z.mean().values
                o = xr.apply_ufunc(_f, x, y, yeara, yearb,
                        input_core_dims=(['date'],['date'],['date'],['date']),
                        output_core_dims=([],[]),dask='parallelized',
                        exclude_dims=set(('date',)),
                        vectorize=True,
                        kwargs=dict(nn=nn))
                o[0].to_netcdf(_djn(dir2_, '{}_{}-{}_r.nc'.format(sid, y0, y1)))
                o[1].to_netcdf(_djn(dir2_, '{}_{}-{}_p.nc'.format(sid, y0, y1)))
    np.savez(_djn(dir2_, 'stp_mean_{}-{}'.format(y0,y1)), oo)


if __name__ == '__main__':
    main()
