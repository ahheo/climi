#!/usr/bin/env python3

import numpy as np
import geopandas as gpd
import matplotlib as mpl
mpl.use('pdf', force=True)
import matplotlib.pyplot as plt
import iris
import os
import time
import logging
import warnings
import argparse
import yaml

from scipy.stats import ttest_ind_from_stats as _tt
from time import localtime, strftime

from climi.uuuu import *
from climi.pppp import *


_here_ = get_path_(__file__)


def _cubeF(cube, f='MEAN'):
    return cube.collapsed(get_xy_dim_(cube),
                          eval(r'iris.analysis.{}'.format(f))).data


def _min_mean_max(cubeLL, lo, la):
    def _fcL(cL):
        return np.ma.vstack([np.ma.asarray([_cubeF(c, f) for c in cL]).ravel()
                             for f in ('MIN', 'MEAN', 'MAX' )])
    cLL = [[nine_points_cube(c, lo, la) for c in cubeL] for cubeL in cubeLL]
    o = [_fcL(cL) for cL in cLL]
    return (np.ma.hstack([np.ma.mean(i, axis=1, keepdims=True) for i in o]),
            np.ma.hstack([np.ma.std(i, axis=1, ddof=1, keepdims=True)
                          for i in o]),
            o[0].shape[1])


def _dif_ttest(m, s, n):
    dm = m[:, 1:] - m[:, :1]
    ds = np.full(dm.shape, '')
    for i in range(m.shape[0]):
        for j in range(1, m.shape[1]):
            p = _tt(m[i, 0], s[i, 0], n,
                    m[i, j], s[i, j], n, equal_var=False)[1]
            if p <= .05:
                ds[i, j - 1] = '*'
    return (dm, ds)


vdict = {
    'PRSN': ['year', 'djf'],
    'FrostDays': ['year'],
    'ZeroCrossingDays': ['year', 'djf'],
    'SncDays': ['year'],
    'Snd20Days': ['year'],
    'PRSNmax': ['year'],
    'ColdRainDays': ['year'],
    'WarmSnowDays': ['year'],
    'ColdRainWarmSnowDays': ['year'],
    'MinusDays': ['year'],
    'FreezingDays': ['year']
    }

sdict = {
    'Åre': [13.11, 63.43],#
    'Tränaby': [15.26, 65.71],#
    'Falun': [15.66, 60.62],
    'Oslo': [10.68, 59.96],
    'Levi': [24.83, 67.8],
    'Ruka': [29.16, 66.16],
    'Cortina': [12.13, 46.54],
    'Chamonix': [6.89, 45.92],
    'Oberstdorf': [10.28, 47.38],
    'Zermatt': [7.75, 46.03],
    'Kitzbuhl': [12.48, 47.43],
    'Kebnekaise': [18.7, 67.9],
    'Kiruna': [20.2, 67.8],
    'Tärendö': [22.6, 67.2],
    'Överkalix': [22.8, 66.3],
    'Kalix': [23.2, 65.9],
    'Norrköping': [16.2, 58.6],
    'Karlskoga': [14.5, 59.3],
    'Västerås': [16.5, 59.6],
    'Ludvika': [15.2, 60.2],
    'Mora': [14.5, 61.0]
    }


def _hm1(fig, ax, ddata, ddata_, xL, yL, ti, vl):
    vm = max(abs(ddata.min()), abs(ddata.max()))
    im = heatmap(ddata, yL, xL[1:],
                 vmin=-vm, vmax=vm,
                 ax=ax, cmap="PuOr_r", aspect='auto')
    texts = annotate_heatmap(im, data_=ddata_, valfmt="{:.2f}{:s}",
                             threshold=.5*vm, middle_0=True, fontsize=8)
    ax.set_title(ti, dict(fontsize=10, fontweight='bold'))
    cb = aligned_cb_(fig, ax, im, [.01, .01], orientation='vertical')
    if vl:
        cb.set_label('$\Delta$' + vl)


def _hm0(fig, ax, data, data_, xL, yL, ti, vl):
    im = heatmap(data, yL, xL,
                 ax=ax, cmap="magma_r", aspect='auto')
    texts = annotate_heatmap(im, data_=data_, valfmt="${:.1f}\pm{:.1f}$",
                             fontsize=7)
    ax.set_title(ti, dict(fontsize=10, fontweight='bold'))
    cb = aligned_cb_(fig, ax, im, [.01, .01], orientation='vertical')
    if vl:
        cb.set_label(vl)


def _hm(fn, data, data_, ddata, ddata_, xL, yL, vl):
    fig = init_fig_(fx=7.5, fy=2.5)#,
    #                r=.875, t=.9, l=.08, b=.36,
    #                w=.333)
    #fig = init_fig_(fx=10, fy=3, l=.15, r=.9, t=.95, b=.15)
    #ax = fig.add_subplot(1, 2, 2)
    ax = fig.add_axes([.08, .36, .4, .54])
    im = heatmap(data, yL, xL,
                 ax=ax, cmap="magma_r", aspect='auto')
    texts = annotate_heatmap(im, data_=data_, valfmt="${:.1f}\pm{:.1f}$",
                             fontsize=8)
    ax.set_title('Absolute', dict(fontsize=10, fontweight='bold'))
    cb = aligned_cb_(fig, ax, im, [.01, .01], orientation='vertical')
    cb.set_label(vl)
    #ax = fig.add_subplot(1, 2, 2)
    ax = fig.add_axes([.59, .36, .29, .54])
    vm = max(abs(ddata.min()), abs(ddata.max()))
    im = heatmap(ddata, [], xL[1:],
                 vmin=-vm, vmax=vm,
                 ax=ax, cmap="PuOr_r", aspect='auto')
    texts = annotate_heatmap(im, data_=ddata_, valfmt="{:.2f}{:s}",
                             threshold=.5*vm, middle_0=True, fontsize=8)
    ax.set_title('$-$ Historical (*: $p\leq0.05$)',
                 dict(fontsize=10, fontweight='bold'))
    cb = aligned_cb_(fig, ax, im, [.01, .01], orientation='vertical')
    cb.set_label('$\Delta$' + vl)
    plt.savefig(fn, dpi=300)
    plt.close(fig)


def main():
    warnings.filterwarnings("ignore", category=UserWarning)
    parser = argparse.ArgumentParser('PLTCLMIDX SKII')
    parser.add_argument("-i", "--single", action="store_true",
                        help="as in single-file mode")
    parser.add_argument("-x", "--indices",
                        type=str, help="indices to be calculated")
    parser.add_argument("-s", "--sites",
                        type=str, help="indices to be calculated")
    args = parser.parse_args()
    #mpl.style.use('seaborn')
    lfn = 'plt-skii'
    nlog = len(schF_keys_('', lfn, ext='.log'))
    logging.basicConfig(filename='{}{}.log'.format(lfn, '_' * nlog),
                        filemode='w',
                        level=logging.INFO)
    logging.info(' {:_^42}'.format('start of program'))
    logging.info(strftime(" %a, %d %b %Y %H:%M:%S +0000", localtime()))
    logging.info(' ')
    ##################################################################CONFIGURE
    gg = ['curr0130', 'gwl15', 'gwl3']
    gwls = ['Historical', 'Current', '1.5 K warming', '3 K warming']
    #gg = ['gwl15', 'gwl2', 'gwl25', 'gwl3', 'gwl35', 'gwl4']
    #gwls = ['current', '1.5 K warming', '2 K wariming', '2.5 K warming',
    #                    '3 K wariming', '3.5 K warming', '4 K warming']
    odir = '/nobackup/rossby24/users/sm_chali/DATA/energi/skii/'
    os.makedirs(odir, exist_ok=True)
    ddir = '/nobackup/rossby22/sm_chali/DATA/energi/res/gwls/EUR/'
    ffmt1 = '{}{}_{}_CC_{}.pdf'
    ffmt = '{}{}_{}_{}.pdf'
    ############################################################DOING SOMETHING
    xi_ = args.indices
    if xi_:
        vvv = xi_.split(',')
    else:
        vvv = vdict.keys()
    si_ = args.sites
    if args.single:
        if si_:
            if si_ == 'skate':
                sites = list(sdict.keys())[16:]
            elif si_ == 'skii':
                sites = list(sdict.keys())[:11]
            elif si_ == 'reindeer':
                sites = list(sdict.keys())[11:16]
            else:
                raise Exception("currently supporting options for -s with -i:"
                                " skii, reindeer, and skate")
        else:
            raise Exception("-s SSS is mandatory with -i")
    else:
        if si_:
            if si_.isnumeric():
                sites = list(sdict.keys())[int(si_):]
            else:
                sites = si_.split(',')
        else:
            sites = sdict.keys()
    for var in vvv:
        freqs = vdict[var]
        #freqs = ['Nov', 'Dec']
        for freq in freqs:
            t000 = l__('{} >>>>>> {}'.format(var, freq))
            a, dn = load_clmidx_(ddir, var, gwls=gg, freq=freq, newestV=True)
            ll_('< load', t000)
            if len(dn) == 0:
                continue
            sc, unit = sc_unit_clmidx_(a[0][0], var)
            if args.single:
                fn0 = ffmt.format(odir, var, freq, si_)
                fig0 = init_fig_(fx=7.5, fy=7.5,
                                r=.91, t=.96, l=.075, b=.13,
                                w=.28, h=.35)
                ncol = 2
                nrow = int(np.ceil(len(sites) / ncol))
            for i, site in enumerate(sites):
                t000 = l__('  {} >>>> {}'.format(i, site))
                mm, ss, n = _min_mean_max(a, *sdict[site])
                ll_('  < mmm', t000)
                if args.single:
                    #dm, ds = _dif_ttest(mm, ss, n)
                    if i < len(sites) - 1:
                        xl, yl = [], []
                        vl = ''
                    else:
                        yl = ['MIN', 'MEAN', 'MAX']
                        xl = gwls
                        vl = '{} ({})'.format(var, unit)
                    ax_ = fig0.add_subplot(nrow, ncol, i + 1)
                    _hm0(fig0, ax_, mm*sc, ss*sc, xl, yl, site, vl)
                    #_hm1(fig0, ax_, dm*sc, ds, xl, yl, site, vl)
                else:
                    dm, ds = _dif_ttest(mm, ss, n)
                    ll_('  < ddd', t000)
                    yl = ['MIN', 'MEAN', 'MAX']
                    xl = gwls
                    vl = '{} ({})'.format(var, unit)
                    fn = ffmt.format(odir, var, freq, site)
                    _hm(fn, mm*sc, ss*sc, dm*sc, ds, xl, yl, vl)
            if args.single:
                plt.savefig(fn0, dpi=300)
                plt.close(fig0)


if __name__ == '__main__':
    start_time = time.time()
    main()
    logging.info(' ')
    logging.info(' {:_^42}'.format('end of program'))
    logging.info(' {:_^42}'.format('TOTAL'))
    logging.info(' ' + rTime_(time.time() - start_time))
    logging.info(strftime(" %a, %d %b %Y %H:%M:%S +0000", localtime()))
