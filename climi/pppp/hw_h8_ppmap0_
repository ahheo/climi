#!/usr/bin/env python3

import matplotlib as mpl
mpl.use('pdf', force=True)
import matplotlib.pyplot as plt
import numpy as np
import argparse
import yaml
import os
import warnings
import datetime
import iris
from iris.fileformats.netcdf import UnknownCellMethodWarning
from climi.pppp import *
from climi.uuuu import *
from climi.uuuu.cccc import _get_ind_lolalim as lllim_


_here_ = get_path_(__file__)


def _vlabel(var, mtd=None):
    v = var.split('-')[0]
    yl = v[:4].upper() + v[4:]
    if isinstance(mtd, str) and mtd[0] == 'g':
        return '$\Delta$(%) years with {}$\geq${}'.format(yl, mtd[1:])
    else:
        return '$\Delta${}'.format(yl)


def _cmnm(bd):
    bd = np.asarray(bd)
    cm = list(plt.get_cmap("magma_r", len(bd)-1).colors)
    cmap = mpl.colors.ListedColormap(('white', *cm[:-1])) # "afmhot_r"
    cmo = cm[-1]
    cmap.set_over(cmo)
    norm = mpl.colors.BoundaryNorm(bd, cmap.N)
    return dict(cmap=cmap, norm=norm)


def _pdict(var, mtd):
    if mtd[0] == 'g':
        bd = np.arange(0, 100, 10)
    else:
        bd = [0, 6, 9, 12, 15, 18, 24, 48, 96]
    return _cmnm(bd)


def _rf(fn):
    if os.path.isfile(fn):
        return iris.load_cube(fn)


def _clcdx(ddir, gcms, rcms, y_, y0y1, y0y1_, freq, var):
    ffmt = '{}mp_r_{}_{}_{}_{}-{}_{}_{}.nc'
    def _yy(gcm, rcm, yy):
        o0 = _rf(ffmt.format(ddir, yy, gcm, rcm, *y0y1_, freq, var))
        o1 = _rf(ffmt.format(ddir, yy, gcm, rcm, *y0y1, freq, var))
        return o1.copy(o1.data - o0.data)

    o = []
    for gcm in gcms:
        oo = []
        for rcm in rcms:
            o0 = _yy(gcm, rcm, y_[0])
            o1 = _yy(gcm, rcm, y_[1])
            oo.append(o1.copy(o1.data - o0.data))
        o.append(oo)
    return o


def _clcmp(ddir, gcms, y_, y0y1, y0y1_, freq, var, go_='g'):
    ffmt = '{}mp_{}_{}_{}_{}-{}_{}_{}.nc'
    def _yy(gcm, yy):
        o0 = _rf(ffmt.format(ddir, go_, yy, gcm, *y0y1_, freq, var))
        o1 = _rf(ffmt.format(ddir, go_, yy, gcm, *y0y1, freq, var))
        return o1.copy(o1.data - o0.data)
    o = []
    for gcm in gcms:
        o0 = _yy(gcm, y_[0])
        o1 = _yy(gcm, y_[1])
        o.append(o1.copy(o1.data - o0.data))
    return o


def _pch(fig, nrow, ncol, ii, o, rgD, pD, tiD=None, xi=None, yi=None):
    ax, pch = pch_ll_(fig, nrow, ncol, ii, o,
                       rg=rgD, pcho=pD, fr_on=True)
    if xi:
        ax.set_title(xi, tiD)
    if yi:
        axp = ax.get_position()
        fig.text(axp.x0 - .01, (axp.y0 + axp.y1)/2, yi,
                 ha='center', va='baseline',
                 rotation_mode='anchor', rotation='vertical',
                 **tiD)
    return (ax, pch)


def _tx_rgmean(fig, ax, cube, rgD):
    s = '{:.1f}'.format(rgMean_cube(cube, rgD=rgD).data)
    aligned_tx_(fig, ax, s, rpo='tl', itv=-0.005, alpha=.5, fontsize=8)


def _mp0(fn, cgL, crLL, gcms, rcms, pD, rgD, vl, coL=None, obss=None):
    tiD = dict(fontsize=10, fontweight='bold')
    nrow = len(gcms) + (1 if coL else 0)
    ncol = len(rcms) + 1
    pD_ = dict(rasterized=True)
    pD_.update(pD)
    fx = 7.5
    ifx = fx/ncol
    fy = ifx * .85 * nrow
    fig = init_fig_(fx=fx, fy=fy, l=.04, r=.9, t=.91 if coL else .95, b=.02)
    def _p(ii, o, xi=None, yi=None):
        return _pch(fig, nrow, ncol, ii, o, rgD, pD_, tiD, xi, yi)
    axs = []
    if coL:
        i_ = 1
        axo = []
        for i, (cube, xi) in enumerate(zip(coL, obss)):
            if cube:
                ax, pch = _p(i + 1, cube, xi)
                ax_move_(ax, dy=.04)
                axo.append(ax)
                _tx_rgmean(fig, ax, cube, rgD)
    else:
        i_ = 0
    for i, (cg, crL, yi) in enumerate(zip(cgL, crLL, gcms)):
        for ii, (cube, xi) in enumerate(zip([cg] + crL, ['GCM'] + rcms)):
            xi_ = xi if i == 0 else None
            yi_ = yi if ii == 0 else None
            if cube:
                ax, pch = _p((i + i_) * ncol + ii + 1, cube, xi_, yi_)
                axs.append(ax)
                _tx_rgmean(fig, ax, cube, rgD)
    cbw = wspace_ax_(*axs[-2:])
    cb = aligned_cb_(fig, axs, pch, [cbw, .02], shrink=.5,
                     orientation='vertical', extend='max')
    cb.set_label(vl)
    #fig.tight_layout()
    plt.savefig(fn, dpi=300)
    plt.close()


def main():
    warnings.filterwarnings("ignore", category=UserWarning)
    warnings.filterwarnings("ignore", category=UnknownCellMethodWarning)
    with open(_here_ + 'cfg_plt_hwmid_h8.yml', 'r') as ymlfile:
        cfg = yaml.safe_load(ymlfile)
    #output dirs
    ddir, fdir, tdir = cfg['ddir'], cfg['fdir'], cfg['tdir']
    os.makedirs(ddir, exist_ok=True)
    os.makedirs(fdir, exist_ok=True)
    os.makedirs(tdir, exist_ok=True)
    #constans
    obss = cfg['obss']
    gcms = cfg['gcms_']
    rcms = cfg['rcms_']
    rcms.sort()
    rcp, ref, rgDs = cfg['rcp'], cfg['ref'], cfg['rgDs']
    idir = cfg['idir']['obss']
    idir_ = cfg['idir']['gcms']
    idir__ = cfg['idir']['rcms']
    rgD_eur = rgDs['eur']
    #loop variables
    vv = ['hwmid-tx', 'hwmid-tn', 'wsdi-tx']
    ff = ['j-d']
    yy = ['g15', 'mean', 'p10', 'p50', 'p90']
    pp = [[1981, 2020], [2021, 2060], [2061, 2100]]
    #loop 0
    for var in vv:
        print('{}'.format(var))
        #loop 1
        for freq in ff:
            print('  {}'.format(freq))
            for y0y1 in pp[1:]:
                print('    {}-{}'.format(*y0y1))
                vl = _vlabel(var, 'p90')
                pD = _pdict(var, 'p90')
                fn = '{}ppmp0_med-10_p{}-{}_{}.pdf'.format(fdir, *y0y1, var)
                crLL = _clcdx(ddir, gcms, rcms, ['p10', 'p50'],
                              y0y1, pp[0], freq, var)
                cgL = _clcmp(ddir, gcms, ['p10', 'p50'],
                             y0y1, pp[0], freq, var)
                _mp0(fn, cgL, crLL, gcms, rcms, pD, rgD_eur, vl)


if __name__ == '__main__':
    main()
