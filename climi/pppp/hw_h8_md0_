#!/usr/bin/env python3

import matplotlib as mpl
mpl.use('pdf', force=True)
import matplotlib.pyplot as plt
import numpy as np
import argparse
import yaml
import os
import warnings
import datetime
import iris
from iris.fileformats.netcdf import UnknownCellMethodWarning
from climi.pppp import *
from climi.uuuu import *
from climi.uuuu.cccc import _get_ind_lolalim as lllim_


_here_ = get_path_(__file__)


def _vlabel(var, mtd=None):
    v = var.split('-')[0]
    yl = v[:4].upper() + v[4:]
    if isinstance(mtd, str) and mtd[0] == 'g':
        return '% years with {}$\geq${}'.format(yl, mtd[1:])
    else:
        return yl


def _rf(fn):
    if os.path.isfile(fn):
        return iris.load_cube(fn)


def _clcdx(ddir, gcms, rcms, y_, y0y1, freq, var):
    ffmt = '{}mp_r_{}_{}_{}_{}-{}_{}_{}.nc'
    o = []
    for gcm in gcms:
        oo = []
        for rcm in rcms:
            oo.append(_rf(ffmt.format(ddir, y_, gcm, rcm, *y0y1, freq, var)))
        o.append(oo)
    return o


def _clcmp(ddir, gcms, y_, y0y1, freq, var, go_='g'):
    ffmt = '{}mp_{}_{}_{}_{}-{}_{}_{}.nc'
    o = []
    for gcm in gcms:
        o.append(_rf(ffmt.format(ddir, go_, y_, gcm, *y0y1, freq, var)))
    return o


def _af(cube, rgD):
    vv = np.linspace(*minmax_cube_(cube, rg=rgD, p=1), 8)
    af = [rgCount_cube(cube, rgD=rgD, function=lambda x: x >= i).data
          for i in vv]
    return (vv, np.asarray(af))


def _plt_af(ax, cgL, crLL, gcms, rcms, y0y1, rgD,
            coL=None, obss=None, lg_=False):
    vvs = []
    if coL:
        cm = plt.get_cmap('tab20b').colors
        lgo, lgo_ = [], []
        for i, (cube, xi) in enumerate(zip(coL, obss)):
            if cube:
                vv, af = _af(cube, rgD)
                vvs.append(vv)
                l_, = ax.plot(vv, af, color=cm[i], lw=2, alpha=.9, zorder=1)
                lgo.append(l_)
                lgo_.append(xi)
    lss = (':', '--', '-.')
    css = ['darkgray'] + list(plt.get_cmap('tab10').colors)
    lgg, lgg_, lgr, lgr_ = [[] for _ in range(4)]
    for i, (cg, crL, yi) in enumerate(zip(cgL, crLL, gcms)):
        for ii, (cube, xi) in enumerate(zip([cg] + crL, ['GCM'] + rcms)):
            lww = 1.5 if ii == 0 else 1
            zoo = 2 if ii == 0 else 3
            if cube:
                vv, af = _af(cube, rgD)
                vvs.append(vv)
                l_, = ax.plot(vv, af, color=css[ii], lw=lww, ls=lss[i],
                              zorder=zoo, alpha=.9)
                if ii == 0:
                    lgg.append(l_)
                    lgg_.append(yi)
                if i == 0:
                    lgr.append(l_)
                    lgr_.append(xi)
    #text
    vvs = flt_l(vvs)
    ax.text(np.median(vvs), 50, '{}-{}'.format(*y0y1),
            zorder=5, ha='center', va='center')
    #legends
    if lg_:
        if coL:
            lego = plt.legend(lgo, lgo_, bbox_to_anchor=(0., 1.01),
                              loc='lower left', borderaxespad=0, frameon=False)
            ax.add_artist(lego)
        legg = plt.legend(lgg, lgg_, bbox_to_anchor=(.5, 1.01),
                          loc='lower center', borderaxespad=0, frameon=False)
        ax.add_artist(legg)
        legr = plt.legend(lgr, lgr_, bbox_to_anchor=(1., 1.01),
                          loc='lower right', borderaxespad=0, frameon=False)
        for i in legg.get_lines():
            i.set_color('k')
            i.set_lw(1.5)
        for i in legr.get_lines():
            i.set_ls('-')
        #ax.add_artist(legr)


def _fa(vl):
    fig = init_fig_(fx=7.5, fy=4, t=.7, l=.09, b=.12)
    ax_opt = dict(ylabel='Land area (%)', xlabel=vl, ylim=(0, 100))
    if '%' not in vl:
        ax_opt.update(dict(xscale='log'))
    ax = fig.add_subplot(1, 1, 1, **ax_opt)
    return (fig, ax)


def main():
    warnings.filterwarnings("ignore", category=UserWarning)
    warnings.filterwarnings("ignore", category=UnknownCellMethodWarning)
    with open(_here_ + 'cfg_plt_hwmid_h8.yml', 'r') as ymlfile:
        cfg = yaml.safe_load(ymlfile)
    #output dirs
    ddir, fdir, tdir = cfg['ddir'], cfg['fdir'], cfg['tdir']
    os.makedirs(ddir, exist_ok=True)
    os.makedirs(fdir, exist_ok=True)
    os.makedirs(tdir, exist_ok=True)
    #constans
    obss = cfg['obss']
    gcms = cfg['gcms_']
    rcms = cfg['rcms_']
    rcms.sort()
    rcp, ref, rgDs = cfg['rcp'], cfg['ref'], cfg['rgDs']
    idir = cfg['idir']['obss']
    idir_ = cfg['idir']['gcms']
    idir__ = cfg['idir']['rcms']
    rgD_eur = rgDs['eur']
    #loop variables
    vv = ['hwmid-tx', 'hwmid-tn', 'wsdi-tx']
    ff = ['j-d']
    yy = ['g15', 'mean']
    #yy = ['p10', 'p50', 'p90']
    pp = [[1981, 2020], [2021, 2060], [2061, 2100]]
    #loop 0
    for var in vv:
        print('{}'.format(var))
        #loop 1
        for freq in ff:
            print('  {}'.format(freq))
            for y_ in yy:
                print('  {}'.format(y_))
                vl = _vlabel(var, y_)
                fn = '{}md0_{}_{}.pdf'.format(fdir, y_, var)
                fig, ax = _fa(vl)
                for y0y1 in pp:
                    print('    {}-{}'.format(*y0y1))
                    crLL = _clcdx(ddir, gcms, rcms, y_, y0y1, freq, var)
                    cgL = _clcmp(ddir, gcms, y_, y0y1, freq, var)
                    if y0y1[1] < 2021:
                        coL = _clcmp(ddir, obss, y_, y0y1, freq, var, 'o')
                        _plt_af(ax, cgL, crLL, gcms, rcms, y0y1, rgD_eur,
                                coL, obss, True)
                    else:
                        _plt_af(ax, cgL, crLL, gcms, rcms, y0y1, rgD_eur)
                fig.tight_layout()
                plt.savefig(fn, dpi=300)
                plt.close()


if __name__ == '__main__':
    main()
